name: Docker Image CI BackeNd

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend:
    name: Backend Tests 2
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3
  
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: backend
          no-cache: true

      - name: ðŸ’£ Clean ghost `backend/src` and old files
        run: |
          rm -rf backend/src
          find . -name "__pycache__" -exec rm -r {} +
          find . -name "*.pyc" -delete


      - name: ðŸ’£ Clean ghost files from old structure
        run: |
          echo "Removing stale ghost files..."
          rm -rf backend/src || true
          find . -name "config.py" -exec grep -H "read_file" {} \; || true
      - name: Debug Python files
        run: |
          find . -name "config.py"
          grep -r "read_file" .
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Show dependencies.py contents
        run: |
          cat backend/app/dependencies.py
      - name: Show contest.py contents
        run: |
          cat backend/tests/conftest.py
      - name: Second check
        run: |
          cat /home/runner/work/journal/journal/backend/tests/conftest.py
            
      
      - name: Remove Python cache
        run: |
          echo "ðŸ§¹ Cleaning all .pyc and __pycache__ folders"
          find . -type d -name "__pycache__" -exec rm -r {} +
          find . -type f -name "*.pyc" -delete
      - name: Debug Python files
        run: |
          find . -name "config.py"
          grep -r "read_file" .

      - name: Run Single Backend Test
        env:
          TESTING: "true"
          DB_HOST: localhost
        run: |
          cd backend
          pytest test_users.py::test_create_user --maxfail=1 --disable-warnings -q
        
      - name: Show Test Results Summary
        if: always()
        run: |
          echo "âœ… Tests completed. See logs for details."
